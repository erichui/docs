import{_ as t,o as e,c as a,e as i}from"./app-65bcf5b2.js";const r={},o=i('<h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h1><blockquote><p>HTTP 是超文本传输协议（Hyper Text Transfer Protocol）的简称，是一种用于在客户端和服务端传输超文本数据的应用层协议。</p></blockquote><h2 id="http-版本变迁" tabindex="-1"><a class="header-anchor" href="#http-版本变迁" aria-hidden="true">#</a> HTTP 版本变迁</h2><p>为了适应不断发展的 Web 需求，HTTP 协议也在升级更新。版本的更新主要是为了解决以下几类问题：</p><ol><li><strong>性能问题</strong>: 在 HTTP/1.0 中，每个请求都会建立一个新的 TCP 链接，这会导致大量的链接建立和断开，从而降低了性能。因此在 HTTP/1.1 中引入了<strong>持久链接</strong>，减少链接建立和断开的次数，以提高数据传输的效率。</li><li><strong>可靠性问题</strong>：HTTP/1.0 通信是基于文本的，容易收到网络故障和堵塞的影响。HTTP/1.1 引入了<strong>缓存控制</strong>和<strong>错误处理机制</strong>以提高可靠性。</li><li><strong>安全性问题</strong>：HTTP/1.0 请求和响应都是以明文数据传输，容易被篡改和窃听。HTTP/1.1 引入了 HTTPS 提供加密和认证功能，提高安全性。</li><li><strong>效率问题</strong>：HTTP/1.0 和 HTTP/1.1 通信是基于请求-响应模型，这就导致客户端需要等待服务端的响应，从而降低了效率。在 HTTP/2 引入了<strong>多路复用</strong>、<strong>头部压缩</strong>和<strong>服务器推送</strong>等，以提高效率。</li></ol><p>下面分别介绍各个版本引入的主要特性：</p><h3 id="http-0-9" tabindex="-1"><a class="header-anchor" href="#http-0-9" aria-hidden="true">#</a> HTTP/0.9</h3><p>刚开始的时候 HTTP 并不是标准，被正式制定为标准是 HTTP/1.0，所以在此之前的协议被统称为 HTTP/0.9。 该版本功能比较简单，只有一个 <code>GET</code> 命令，也没有 <code>header</code> 的概念，只能传递 HTMl 文件。</p><h3 id="http-1-0" tabindex="-1"><a class="header-anchor" href="#http-1-0" aria-hidden="true">#</a> HTTP/1.0</h3><p>相较于上个版本，主要新增了以下几个功能：</p><ul><li>新增了 <code>POST</code> 和 <code>HEAD</code>命令，丰富了客户端和服务器的交互方式</li><li><code>Expire</code> 强缓存 绝对时间</li></ul><h3 id="http-1-1" tabindex="-1"><a class="header-anchor" href="#http-1-1" aria-hidden="true">#</a> HTTP/1.1</h3><ul><li><code>Catch-Control</code> 强缓存 max-age 字段 相对时间</li><li>协商缓存： <ul><li>Last-Modify If-Modify-Since</li><li>Etag If-None-Match</li></ul></li></ul><h3 id="http-2" tabindex="-1"><a class="header-anchor" href="#http-2" aria-hidden="true">#</a> HTTP/2</h3><h3 id="http-3" tabindex="-1"><a class="header-anchor" href="#http-3" aria-hidden="true">#</a> HTTP/3</h3><p>强缓存 本地缓存有效 不需要向服务器发起请求</p><ul><li>Cache-Control 较之 Expires 更为精准。</li><li>Cache-Control 优先级大于 Expires。</li><li>Expires 浏览器兼容性更好，当有不支持 Cache-Control 的浏览器时会以 Expires 为准。</li></ul><p>协商缓存 本地缓存失效 需要向服务器发起请求验证缓存资源是否还可用</p><ul><li>精确度 ETag &gt; Last-Modified。ETag 是通过内容生成hash，而 Last-Modified不一样，在某些场景下准确度会失效。（例如编辑文件，但是文件内容未变，缓存会失效）</li><li>性能 Last-Modified &gt; ETag。Last-Modified 仅仅记录一个时间点，而 ETag需要根据文件的具体内容生成哈希值，相对来说会慢。</li><li>缓存有效 返回 304 状态吗 无效返回 200 状态吗</li></ul>',19),h=[o];function l(d,n){return e(),a("div",null,h)}const T=t(r,[["render",l],["__file","HTTP.html.vue"]]);export{T as default};
