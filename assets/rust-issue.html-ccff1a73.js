import{_ as s,o as n,c as a,e as t}from"./app-65bcf5b2.js";const e={},o=t(`<h1 id="记录-rust-相关问题" tabindex="-1"><a class="header-anchor" href="#记录-rust-相关问题" aria-hidden="true">#</a> 记录 rust 相关问题</h1><h3 id="vec" tabindex="-1"><a class="header-anchor" href="#vec" aria-hidden="true">#</a> Vec</h3><ol><li><p>获取集合中的元素时，是否需要添加引用 <code>&amp;</code></p><ul><li>当集合内元素实现了 <code>Copy trait</code> 时（多为标量类型存储在栈上），可加可不加 <ul><li>加 <code>&amp;</code> 获取元素的引用</li><li>不加则会拷贝当前元素的值到新的变量上</li></ul></li><li>当元素没有实现 <code>Copy trait</code> 时，类如 <code>String</code> 则必须加 <code>&amp;</code>，如果不加的话会触发 <code>move</code> 操作，同时为了保证 <code>vec</code> 的完整性，要触发元素的 <code>copy</code> 操作，添加引用 <code>&amp;</code> 后就不会触发 <code>move</code> 操作</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> test_vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;str1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;str2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token operator">&amp;</span>test_vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="struct" tabindex="-1"><a class="header-anchor" href="#struct" aria-hidden="true">#</a> Struct</h3><ol><li>如何在结构体中存储引用</li></ol><blockquote><p>要想存储引用，必须加上生命周期，以确保结构体的作用范围比引用的数据的作用范围小</p></blockquote><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span><span class="token operator">&lt;</span><span class="token char">&#39;a&#39;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  username<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),p=[o];function c(l,i){return n(),a("div",null,p)}const r=s(e,[["render",c],["__file","rust-issue.html.vue"]]);export{r as default};
